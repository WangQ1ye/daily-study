1.Omit<Type,keys> (剔除不需要的属性)

例如:(content在HTMLAttributes中已经定义)
interface Popover extends Omit<HTMLAttributes<HTMLDivElement>,'content'>{
    content:ReactNode
}

2.Pick<Type, Keys>    (选取需要的数据)

interface Todo {
title: string;
description: string;
completed: boolean;
}
 
type TodoPreview = Pick<Todo, "title" | "completed">;
 
const todo: TodoPreview = {
title: "Clean room",
completed: false,
};

3.Partial<Type>    (变为可选属性)
interface Todo {
    title: string;
    description: string;
    }
     
    function updateTodo(todo: Todo, fieldsToUpdate: Partial<Todo>) {
    return { ...todo, ...fieldsToUpdate };
    }
     
    const todo1 = {
    title: "organize desk",
    description: "clear clutter",
    };
     
    const todo2 = updateTodo(todo1, {
    description: "throw out trash",
    });
    

// 实现方式

type Partial<T>={
    [P in keyof T]?:T[P];
}

4.type和interface
    type:是类型的别名，1.可以针对任何类型
                    2.作用域内只能同一个type只能定义一次   
                    3.（继承写法：&）
    interface:       1.针对的是一个对象结构的类型
                    2.可以多次定义（会进行合并）
                    3.（继承写法：extends）

5.unknown、never
  unknown定义的类型，可以赋任何值给它，但是使用的时候需要先进行断言
  never：通常用于报错使用
